#!/bin/env python
import argparse
from datetime import datetime

import matplotlib.pyplot as plt
import numpy as np
from jsonslicer import JsonSlicer
from itertools import groupby
from operator import itemgetter

def flatten(d):
    out = {}
    for key, val in d.items():
        if isinstance(val, dict):
            deeper = flatten(val).items()
            out.update({key + '_' + key2: val2 for key2, val2 in deeper})
        else:
            out[key] = val
    return out


def plot_with_other(ax, times, data, key, key_other='total_execs', smooth=None):
    if key not in data[0] or key_other not in data[0]:
        ax.set_ylabel("Data not available")
        return

    ax.plot(times, [row[key_other] for row in data], label=key_other)
    ax.set_ylabel(key_other)

    inner_ax = ax.twinx()
    y = [row[key] for row in data]

    if smooth and smooth < len(y):
        kernel_size = smooth
        y = np.convolve(y, np.ones(kernel_size) / kernel_size, mode='valid')

    inner_ax.plot(times[:len(y)], y, label=key, color='red')
    inner_ax.set_ylabel(key)

    plt.setp(ax.get_xticklabels(), rotation=30, ha='right')


def plot_client_stats(start_date, client_stats):
    times = []
    data = []

    for client_stats in client_stats:
        time = datetime.fromtimestamp(client_stats['time']['secs_since_epoch'])
        times.append(time - start_date)
        del client_stats['time']

        # Sats data
        flat_stats = flatten(client_stats)
        data.append(flat_stats)

    times = [t.total_seconds() / 60 for t in times]

    fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8), (ax9, ax10)) = plt.subplots(5, 2, sharex="all")

    # Corpi
    plot_with_other(ax1, times, data, "objective_size")
    plot_with_other(ax2, times, data, "corpus_size")
    # Errors
    plot_with_other(ax3, times, data, "errors_ssl_error")
    # Corpus vs Errors
    plot_with_other(ax4, times, data, "objective_size", key_other="errors_ssl_error")
    # Coverage
    plot_with_other(ax5, times, data, "coverage_discovered")
    # Performance
    plot_with_other(ax6, times, data, "exec_per_sec", smooth=3000)
    # Traces and Terms
    plot_with_other(ax7, times, data, "trace_max_trace_length")
    plot_with_other(ax8, times, data, "trace_mean_trace_length", smooth=50)
    plot_with_other(ax9, times, data, "trace_max_term_size")
    plot_with_other(ax10, times, data, "trace_mean_term_size", smooth=50)

    fig.tight_layout(pad=0.005)


def main():
    parser = argparse.ArgumentParser(description='Plots statistics')
    parser.add_argument('experiment', type=str,
                        help='Name of the experiment')
    args = parser.parse_args()

    stats_path = "%s/stats.json" % args.experiment  # "experiments/2021-06-28T17:18:22Z-e29788aec4ed9a6237194ecce45017133ae708b0"

    with open(stats_path) as stats:
        all_stats = list(JsonSlicer(stats, (), yajl_allow_multiple_values=True))

        start_date = datetime.fromtimestamp(all_stats[0]['time']['secs_since_epoch'])
        keys = flatten(all_stats[0]).keys()
        print("Available keys: %s" % keys)

        sortkeyfn = itemgetter("id")
        for key, group in groupby(sorted(all_stats, key=sortkeyfn), key=sortkeyfn):
            plot_client_stats(start_date, group)

        plt.show()


main()
