#!/bin/env python
from datetime import datetime

from jsonslicer import JsonSlicer
import numpy as np
import matplotlib.pyplot as plt
import collections
import argparse

def flatten(d):
    out = {}
    for key, val in d.items():
        if isinstance(val, dict):
            deeper = flatten(val).items()
            out.update({key + '_' + key2: val2 for key2, val2 in deeper})
        else:
            out[key] = val
    return out

def plot_with_other(ax, times, data, key, key_other='total_execs', smooth=False):
    ax.plot(times, [row[key_other] for row in data], label=key_other)
    #ax.legend(loc="upper right")
    ax.set_ylabel(key_other)

    inner_ax = ax.twinx()
    y = [row[key] for row in data]

    if smooth:
        kernel_size = 3000
        y = np.convolve(y, np.ones(kernel_size)/kernel_size, mode='valid')

    inner_ax.plot(times[:len(y)], y, label=key, color='red')
    inner_ax.set_ylabel(key)

    plt.setp(ax.get_xticklabels(), rotation=30, ha='right')



parser = argparse.ArgumentParser(description='Plots statistics')
parser.add_argument('experiment', type=str,
                    help='Name of the experiment')
args = parser.parse_args()

stats_path = "experiments/%s/stats.json" % args.experiment # "2021-06-28T17:18:22Z-e29788aec4ed9a6237194ecce45017133ae708b0"

with open(stats_path) as stats:
    times = []
    data = []
    keys = None
    start_date = None

    for client_stats in JsonSlicer(stats, (), yajl_allow_multiple_values=True):
        time = datetime.fromtimestamp(client_stats['time']['secs_since_epoch'])
        if not start_date:
            start_date = time

        times.append(time - start_date)

        del client_stats['time']

        flat_stats = flatten(client_stats)
        data.append(flat_stats)

        keys = flat_stats.keys()

    times = [t.total_seconds() / 60 for t in times]

    print(keys)

    fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6),  (ax7, ax8)) = plt.subplots(4, 2, sharex=True)

    plot_with_other(ax1, times, data, "objective_size")
    plot_with_other(ax2, times, data, "corpus_size")

    plot_with_other(ax3, times, data, "errors_ssl_error")

    plot_with_other(ax4, times, data, "objective_size", key_other="errors_ssl_error")

    plot_with_other(ax5, times, data, "coverage_discovered")

    plot_with_other(ax6, times, data, "exec_per_sec", smooth=True)


    fig.tight_layout(pad=0.005)
    plt.show()





